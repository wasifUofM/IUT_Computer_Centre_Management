/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Mar 26, 2011, 10:20:28 AM
 */
package Gui;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.jvnet.substance.SubstanceLookAndFeel;
import org.jvnet.substance.skin.SubstanceMistAquaLookAndFeel;
import java.awt.Graphics2D;
import java.awt.SplashScreen;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Rectangle2D.Double;
import java.awt.Color;
import java.awt.Dimension;

/**
 *
 * @author tok_lebu
 */
public class MainFrame extends javax.swing.JFrame {

    public boolean b = false;
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        CurrentDate();
        HomePanel hp = new HomePanel();
        conn = JavaConnect.ConnecrDb();
        //hp.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
        tabbedPane.add(hp);

    }

    public void CurrentDate() {
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        date_txt.setText(year + "/" + (month + 1) + "/" + day);
        int second = cal.get(Calendar.SECOND);
        int minute = cal.get(Calendar.MINUTE);
        int hour = cal.get(Calendar.HOUR);
        time_txt.setText(hour + ":" + (minute) + ":" + second);
    }

    public void Close() {

        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        cmd_login = new javax.swing.JButton();
        cmd_report = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        tabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        viewMenu = new javax.swing.JMenu();
        viewInfoMenuItem = new javax.swing.JMenuItem();
        matchinfoMenuItem = new javax.swing.JMenuItem();
        softwareview = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        AddComputerItem = new javax.swing.JMenuItem();
        softpcItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        date_txt = new javax.swing.JMenu();
        time_txt = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Home"); // NOI18N

        toolBar.setRollover(true);

        cmd_login.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gui/Login-icon.png"))); // NOI18N
        cmd_login.setToolTipText("LogIn");
        cmd_login.setFocusable(false);
        cmd_login.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_login.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_loginActionPerformed(evt);
            }
        });
        toolBar.add(cmd_login);

        cmd_report.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gui/report..png"))); // NOI18N
        cmd_report.setToolTipText("Queries...");
        cmd_report.setFocusable(false);
        cmd_report.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_report.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_reportActionPerformed(evt);
            }
        });
        toolBar.add(cmd_report);

        jScrollPane.setViewportView(tabbedPane);

        viewMenu.setText("File");

        viewInfoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        viewInfoMenuItem.setText("Admin Info");
        viewInfoMenuItem.setToolTipText("Admin information database for Computer Centre");
        viewInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInfoMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewInfoMenuItem);

        matchinfoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        matchinfoMenuItem.setText("Purchase Info");
        matchinfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchinfoMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(matchinfoMenuItem);

        softwareview.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        softwareview.setText("Software Info");
        softwareview.setToolTipText("Software Information Database");
        softwareview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softwareviewActionPerformed(evt);
            }
        });
        viewMenu.add(softwareview);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("MicroComputer Info");
        jMenuItem1.setToolTipText("MicroComputer Information Database");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        viewMenu.add(jMenuItem1);
        viewMenu.add(jSeparator1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gui/Actions-application-exit-icon.png"))); // NOI18N
        jMenuItem3.setText("Exit");
        jMenuItem3.setToolTipText("Quit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        viewMenu.add(jMenuItem3);

        jMenuBar1.add(viewMenu);

        jMenu1.setText("Edit");

        AddComputerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        AddComputerItem.setText("Hardwares & MicroComputers");
        AddComputerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddComputerItemActionPerformed(evt);
            }
        });
        jMenu1.add(AddComputerItem);

        softpcItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        softpcItem.setText("Softwares & MicroComputers");
        softpcItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softpcItemActionPerformed(evt);
            }
        });
        jMenu1.add(softpcItem);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Help");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gui/Help-icon.png"))); // NOI18N
        jMenuItem4.setText("Help.pdf");
        jMenu3.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("About us");
        jMenu3.add(jMenuItem5);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("About Project");
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        date_txt.setText("Date");
        date_txt.setToolTipText("Date(yyyy/mm/dd)");
        jMenuBar1.add(date_txt);

        time_txt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gui/Time-Machine-icon.png"))); // NOI18N
        time_txt.setText("Time");
        time_txt.setToolTipText("Time(hh:mm:ss)");
        jMenuBar1.add(time_txt);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1155, Short.MAX_VALUE)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInfoMenuItemActionPerformed
        //*********
        int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("Admin Info")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {

                Admin p = new Admin(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.add(p);
                tabbedPane.setSelectedComponent(p);


            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {

            Admin p = new Admin(tabbedPane);
            p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
            tabbedPane.addTab("Admin Info", p);
            tabbedPane.setSelectedComponent(p);


        }
    }//GEN-LAST:event_viewInfoMenuItemActionPerformed

    private void matchinfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchinfoMenuItemActionPerformed
        // ******
        int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("Purchase Info")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {

                Purchase p = new Purchase(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.add(p);
                tabbedPane.setSelectedComponent(p);


            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {

            Purchase p = new Purchase(tabbedPane);
            p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
            tabbedPane.addTab("Purchase Info", p);
            tabbedPane.setSelectedComponent(p);


        }
    }//GEN-LAST:event_matchinfoMenuItemActionPerformed

    private void softwareviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softwareviewActionPerformed
        // ******
        int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("software Info")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {

                Software p = new Software(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.add(p);
                tabbedPane.setSelectedComponent(p);


            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {

            Software p = new Software(tabbedPane);
            p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
            tabbedPane.addTab("Software Info", p);
            tabbedPane.setSelectedComponent(p);


        }
    }//GEN-LAST:event_softwareviewActionPerformed

    private void AddComputerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddComputerItemActionPerformed
        int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("Hardwares & MicoComputer")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {

                HardwareComputer p = new HardwareComputer(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.add(p);
                tabbedPane.setSelectedComponent(p);


            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {

            HardwareComputer p = new HardwareComputer(tabbedPane);
            p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
            tabbedPane.addTab("Hardwares & MicoComputer", p);
            tabbedPane.setSelectedComponent(p);


        }
    }//GEN-LAST:event_AddComputerItemActionPerformed

    private void softpcItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softpcItemActionPerformed
        int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("Softwares & MicroComputers")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {

                SoftwareComputer p = new SoftwareComputer(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.add(p);
                tabbedPane.setSelectedComponent(p);


            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {

            SoftwareComputer p = new SoftwareComputer(tabbedPane);
            p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
            tabbedPane.addTab("Softwares & MicroComputers", p);
            tabbedPane.setSelectedComponent(p);


        }
    }//GEN-LAST:event_softpcItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("MicroComputer")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {

                MicroComputer p = new MicroComputer(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.add(p);
                tabbedPane.setSelectedComponent(p);


            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {

            MicroComputer p = new MicroComputer(tabbedPane);
            p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
            tabbedPane.addTab("MicroComputer", p);
            tabbedPane.setSelectedComponent(p);


        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
         int p = JOptionPane.showConfirmDialog(null, "Do you really want to close the application", "Exit", JOptionPane.YES_NO_OPTION);
         if (p == 0) {
            Close();

        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void cmd_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_loginActionPerformed
           int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("Login")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {
                try {
                    LoginPanel p = new LoginPanel(tabbedPane);
                    p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                    tabbedPane.add(p);
                    tabbedPane.setSelectedComponent(p);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {
            try {
                LoginPanel p = new LoginPanel(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.addTab("Login", p);
                tabbedPane.setSelectedComponent(p);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cmd_loginActionPerformed

    private void cmd_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_reportActionPerformed
        int c = 1;
        int i;
        int compocount = tabbedPane.getComponentCount();
        if (compocount != 0) {
            for (i = 0; i < compocount; i++) {
                String name = tabbedPane.getComponent(i).getName();
                if (name.equals("Inquiries")) {
                    c = 0;
                    break;
                }
            }
            if (c != 0) {
                try {
                     Inquiry p = new  Inquiry(tabbedPane);
                    p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                    tabbedPane.add(p);
                    tabbedPane.setSelectedComponent(p);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                tabbedPane.setSelectedComponent(tabbedPane.getComponent(i));
            }
        } else {
            try {
                 Inquiry p = new  Inquiry(tabbedPane);
                p.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
                tabbedPane.addTab("Inquiries", p);
                tabbedPane.setSelectedComponent(p);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cmd_reportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static SplashScreen loading_Screen;

public static Double loading_TextArea;
public static Double loading_ProgressArea;
public static Graphics2D loading_graphics;
    public static void main(String args[]) {
         loadingMethod();
        mainMethod();
        if(loading_Screen!=null){
            loading_Screen.close();
            }
        
        
        
       /* java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    //new MainFrame().setVisible(true);
                    UIManager.setLookAndFeel(new SubstanceMistAquaLookAndFeel());
                    MainFrame mf = new MainFrame();
                    mf.setVisible(true);
                    mf.setLocationRelativeTo(null);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });*/
    }
    
    
    
     private static void sleepThread() {
            try
                {
                    Thread.sleep(1800);
                }
                catch (InterruptedException ex)
                {
                    // Do something, if there is a exception
                    System.out.println(ex.toString());
                }
        }
     
     
     public static void loadingMethod(){
         loading_Screen= SplashScreen.getSplashScreen();
         if(loading_Screen!=null){
             Dimension dim=loading_Screen.getSize();
             int ht=dim.height;
             int wd=dim.width;
             loading_TextArea= new Rectangle2D.Double(15,ht=(int) .7,wd=(int) .4,30);
             loading_ProgressArea=new Rectangle2D.Double(15,ht=(int) .55,wd=(int) .4,25);
             loading_graphics=loading_Screen.createGraphics();
             
         }
     }
     public static void loadingText(String string){
         if(loading_Screen!=null){
             loading_graphics.setPaint(Color.CYAN);
             loading_graphics.fill(loading_TextArea);
             loading_graphics.setPaint(Color.BLACK);
            loading_graphics.drawString(string, (int)loading_TextArea.getX()+10,(int)loading_TextArea.getY()+20);
             loading_Screen.update();
             
         }
     }

     public static void loadingProgress(int prog){
         
         if(loading_Screen!=null){
             loading_graphics.setPaint(Color.WHITE);
             loading_graphics.fill(loading_TextArea);
             loading_graphics.setPaint(Color.WHITE);
             loading_graphics.draw(loading_TextArea);
             int x=(int)loading_ProgressArea.getMinX();
             int y=(int)loading_ProgressArea.getHeight();
         //   public int done_prog=prog*width/100;
             int done_prog=50;
             loading_graphics.setPaint(Color.WHITE);
             loading_graphics.fillRect(x, y, done_prog, 25);
             loading_Screen.update();
             
         }
     
     }
     
     public static void mainMethod(){
         for(int i=1;i<5;i++){
             loadingText("IUT Computer Center Management System");
             loadingProgress(i*10);
             try {
                  //Class.forName("org.sqlite.JDBC");
           // Connection conn = DriverManager.getConnection("jdbc:sqlite:D:\\2nd year\\CIT 4401(Visual Programming)\\New_Computer\\ComputerJava.sqlite");
           
                 sleepThread();
             } catch (Exception e) {
                 JOptionPane.showMessageDialog(null, e.getMessage());
             }
               }
           java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    //new MainFrame().setVisible(true);
                    UIManager.setLookAndFeel(new SubstanceMistAquaLookAndFeel());
                    MainFrame mf = new MainFrame();
                    mf.setVisible(true);
                    mf.setLocationRelativeTo(null);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
     }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddComputerItem;
    private javax.swing.JButton cmd_login;
    private javax.swing.JButton cmd_report;
    private javax.swing.JMenu date_txt;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem matchinfoMenuItem;
    private javax.swing.JMenuItem softpcItem;
    private javax.swing.JMenuItem softwareview;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JMenu time_txt;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JMenuItem viewInfoMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
